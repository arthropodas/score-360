"""
Django settings for score360 project.


Generated by 'django-admin startproject' using Django 5.0.1.


For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/


For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""


import os
from pathlib import Path
from decouple import config
from datetime import timedelta
import logging


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("JWT_SECRET")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
ALLOWED_HOSTS = ['*']




# config = Config()
# Application definition


INSTALLED_APPS = [
    "daphne",
    "channels",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "usermanagement",
    "tournament_management",
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "team_management",
    "match_management",
    "score_management",
]
AUTH_USER_MODEL = "usermanagement.UserData"


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
 
]


ROOT_URLCONF = "score360.urls"


TEMPLATES = [
   {
       "BACKEND": "django.template.backends.django.DjangoTemplates",
       "DIRS": [],
       "APP_DIRS": True,
       "OPTIONS": {
           "context_processors": [
               "django.template.context_processors.debug",
               "django.template.context_processors.request",
               "django.contrib.auth.context_processors.auth",
               "django.contrib.messages.context_processors.messages",
           ],
       },
   },
]


WSGI_APPLICATION = "score360.wsgi.application"
ASGI_APPLICATION = 'score360.asgi.application'
REST_FRAMEWORK = {
   "DEFAULT_AUTHENTICATION_CLASSES": (
       "rest_framework_simplejwt.authentication.JWTAuthentication",
   ),
}

DATABASES = {
   "default": {
       "ENGINE": "django.db.backends.mysql",
      "NAME": config("DATABASE"),
       "USER": config("DB_USER"),
       "PASSWORD": config("DB_PASSWORD")
   }
}




# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
AUTH_PASSWORD_VALIDATORS = [
   {
       "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
   },
   {
       "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
   },
   {
       "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
   },
   {
       "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
   },
]


SIMPLE_JWT = {
   "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
   "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
}



CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}



# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/


LANGUAGE_CODE = "en-us"


TIME_ZONE = "UTC"


USE_I18N = True


USE_TZ = True






STATIC_URL = "static/"




DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


EMAIL_BACKEND = config("EMAIL_BACKEND")
EMAIL_HOST = config("EMAIL_HOST")
EMAIL_PORT = config("EMAIL_PORT")
EMAIL_USE_TLS = config("EMAIL_USE_TLS")
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
BASE_URL = config("BASE_URL")
JWT_SECRET = config("JWT_SECRET")




MEDIA_URL = "/media/"


CORS_ALLOWED_ORIGINS = [
   config("BASE_URL"),
]
BASE_DIR = Path(__file__).resolve().parent.parent
LOG_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOG_DIR, exist_ok=True)
LOGGING = {
   'version': 1,
   'disable_existing_loggers': False,
   'handlers': {
       'file': {
           'level': 'INFO',
           'class': 'logging.handlers.TimedRotatingFileHandler',
           'filename': os.path.join(LOG_DIR, 'score360_project.log'),
           'when': 'midnight',
           'backupCount': 7,
           'formatter': 'standard',
       },
   },
   'loggers': {
       '': {
           'handlers': ['file'],
           'level': 'INFO',
           'propagate': True,
       },
   },
   'formatters': {
       'standard': {
           'format': '%(asctime)s [%(levelname)s] %(message)s',
       },
   },
}




